#!/usr/bin/env ruby
# encoding: utf-8
##########################################################
###
##  File: json
##  Desc: Pretty-print a JSON file
##  By:   Dewayne VanHoozer (dvanhoozer@gmail.com)
#
#   The JSON file can have some not JSON header material.
#   The file can be one JSON object or a series of JSON objects (events)
#   where each line in the file is a JSON event.
#

require 'pathname'
require 'multi_json'


def show_usage
  puts <<~EOS

  pretty prints JSON files

  Usage: #{Pathname.new(__FILE__).basebane} json_files+

  Where:

    json_files+ is one or more *.json file paths

  EOS

  exit
end

# Display the usage info
if  ARGV.empty?
  show_usage
  exit
end

paths = ARGV.map do |a|
  a_path = Pathname.new(a)
  if  ! a_path.exist? ||
      ! ['.log', '.json'].include?(a_path.extname.to_s.downcase)
    STDERR.puts "ERROR: Not a valid JSON file '#{a_path}'"
    a_path = nil
  end
  a_path
end.compact

exit if paths.empty?


######################################################
# Local methods

def pretty_print_json(text)
  hash = MultiJson.load( text )
  json = MultiJson.dump( hash, {pretty: true}  )

  puts json
end

def pretty_print_json_events(content)
  events = content.split("\n")

  event_counter = 0

  events.each do |event|
    if '{' == event[0]
      event_counter += 1
      puts
      puts "Event: #{event_counter}"
      puts 
      pretty_print_json(event)
    else
      puts
      puts event 
      puts
    end
  end
end

# print whatever header might exist at th the top
# of the file and return the rest
# assuming its all proper JSON
#
def print_file_header(a_string)
  json_start = a_string.index("\n{")+1
  header = a_string[0..json_start-1]

  puts header

  a_string = a_string[json_start..]
end

def json_events?(content)
  !content.index("\n{").nil?
end

def print_file(a_path)
  puts
  puts "#"*65
  puts "## File: #{a_path}"
  puts

  content = a_path.read

  print_file_header(content) unless '{' == content[0]

  if json_events?(content)
    pretty_print_json_events(content)
  else
    pretty_print_json(content)
  end
end

######################################################
# Main

at_exit do
  puts
  puts "Done."
  puts
end

paths.each do |a_path|
  print_file(a_path)
end
